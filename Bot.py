import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sqlite3
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò === –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï ===
TOKEN = "7854171673:AAEQs0acB0pfD0KMvhqH3gKFop1L8vZee-A"
ADMIN_CHAT_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∏–∑ @userinfobot
# === –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ===

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FREQUENCY, DURATION = range(2)

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
QUESTIONS = [
    {"text": "–∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏ –ø–æ–ª–Ω—É—é –∞–ø–∞—Ç–∏—é, –ø—Ä–æ—Å—Ç—Ä–∞—Ü–∏—é –∏ –±–µ–∑—É—á–∞—Å—Ç–Ω–æ—Å—Ç—å?", "zone": "burnout"},
    {"text": "–Ω–µ –º–æ–≥–ª–∏ –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–µ —Ä—É—Ç–∏–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è?", "zone": "burnout"},
    {"text": "–æ—â—É—â–∞–ª–∏, —á—Ç–æ –∫—Ä–∞—Å–∫–∏ –∂–∏–∑–Ω–∏ –ø–æ–±–ª–µ–∫–ª–∏, –∞ —Ç–æ, —á—Ç–æ —Ä–∞–Ω—å—à–µ –∑–∞–∂–∏–≥–∞–ª–æ, –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —ç–Ω—Ç—É–∑–∏–∞–∑–º?", "zone": "burnout"},
    {"text": "–æ—Å—Ç–∞–≤–ª—è–ª–∏ –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å –∑–∞–¥–∞—á–∏, –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞–ª–∏ –∏–º–∏?", "zone": "burnout"},
    {"text": "–æ—â—É—â–∞–ª–∏ –ø–æ–ª–Ω—É—é —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–æ–∫–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ?", "zone": "integration"},
    {"text": "—Å–ø–æ–∫–æ–π–Ω–æ –Ω–∞–±–ª—é–¥–∞–ª–∏ –∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?", "zone": "integration"},
    {"text": "–æ—â—É—â–∞–ª–∏ —Ä–∞–¥–æ—Å—Ç—å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?", "zone": "integration"},
    {"text": "–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –±–µ–∑ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è?", "zone": "integration"},
    {"text": "–æ—â—É—â–∞–ª–∏ –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –∏/–∏–ª–∏ –ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ?", "zone": "integration"},
    {"text": "–ø—Ä–æ—è–≤–ª—è–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∏ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏?", "zone": "integration"},
    {"text": "–∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ, –ø–æ–≤—ã—à–µ–Ω–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–∂–µ –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º —Å—Ç–∏–º—É–ª–∞–º?", "zone": "distress"},
    {"text": "—Ä–∞–∑–¥—Ä–∞–∂–∞–ª–∏—Å—å –∏ —Ç—Ä–µ–≤–æ–∂–∏–ª–∏—Å—å –¥–∞–∂–µ –æ—Ç –º–µ–ª–æ—á–µ–π?", "zone": "distress"},
    {"text": "—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–µ—É–ø—Ä–∞–≤–ª—è–µ–º—É—é –ø–∞–Ω–∏–∫—É, –ø–∞—Ä–∞–ª–∏–∑—É—é—â–∏–π —Å—Ç—Ä–∞—Ö –∏–ª–∏ –≥–Ω–µ–≤?", "zone": "distress"},
    {"text": "–Ω–µ –º–æ–≥–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑-–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è?", "zone": "distress"},
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
FREQUENCY_SCORES = {"–ù–∏ —Ä–∞–∑—É": 0, "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑": 2, "–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–Ω–µ–π": 5, "–ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å": 10}
DURATION_MULTIPLIERS = {"–ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç": 0.1, "–ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤": 3, "–°—É—Ç–∫–∏ –∏ –±–æ–ª–µ–µ": 10}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('neurobalance.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS test_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER, username TEXT, timestamp TEXT,
                burnout_percent REAL, integration_percent REAL, distress_percent REAL)''')
    conn.commit()
    conn.close()

def save_test_result(user_id, username, burnout_percent, integration_percent, distress_percent):
    from datetime import datetime
    conn = sqlite3.connect('neurobalance.db')
    cur = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cur.execute('''INSERT INTO test_results (user_id, username, timestamp, burnout_percent, integration_percent, distress_percent) 
                VALUES (?, ?, ?, ?, ?, ?)''',
                (user_id, username, timestamp, burnout_percent, integration_percent, distress_percent))
    conn.commit()
    conn.close()

# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    context.user_data['answers'] = []
    context.user_data['current_question'] = 0
    context.user_data['user_id'] = user.id
    context.user_data['username'] = user.username or user.first_name
    context.user_data['last_message_id'] = None
    
    message = await send_question(update, context, 0)
    context.user_data['last_message_id'] = message.message_id
    return FREQUENCY

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_index):
    question_text = QUESTIONS[question_index]['text']
    progress = f"({question_index + 1}/{len(QUESTIONS)})"
    text = f"üß† –í–æ–ø—Ä–æ—Å {progress}:\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –≤—ã:\n{question_text}"
    
    keyboard = [["–ù–∏ —Ä–∞–∑—É", "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑"], ["–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–Ω–µ–π", "–ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"], ["‚è™ –ù–∞–∑–∞–¥", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if context.user_data.get('last_message_id'):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['last_message_id'])
        except: pass
    
    message = await update.message.reply_text(text, reply_markup=reply_markup)
    return message

async def handle_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    current_question = context.user_data['current_question']
    
    if user_answer == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å": return await reset_test(update, context)
    if user_answer == "‚è™ –ù–∞–∑–∞–¥": return await go_back(update, context)
    
    context.user_data['current_frequency'] = user_answer
    context.user_data['current_frequency_score'] = FREQUENCY_SCORES[user_answer]
    
    try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
    except: pass
    
    if user_answer == "–ù–∏ —Ä–∞–∑—É":
        context.user_data['answers'].append({'question': current_question, 'frequency': user_answer, 'frequency_score': 0, 'duration': '–ù–µ –∑–∞–¥–∞–Ω–æ', 'final_score': 0, 'zone': QUESTIONS[current_question]['zone']})
        return await next_question(update, context)
    
    question_text = QUESTIONS[current_question]['text']
    text = f"üß† –í–æ–ø—Ä–æ—Å ({current_question + 1}/{len(QUESTIONS)}):\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –≤—ã:\n{question_text}\n\nüìÖ –û—Ç–≤–µ—Ç: {user_answer}\n\n‚è± –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
    keyboard = [["–ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç", "–ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤", "–°—É—Ç–∫–∏ –∏ –±–æ–ª–µ–µ"], ["‚è™ –ù–∞–∑–∞–¥", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=context.user_data['last_message_id'], text=text, reply_markup=reply_markup)
    return DURATION

async def handle_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    current_question = context.user_data['current_question']
    
    if user_answer == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å": return await reset_test(update, context)
    if user_answer == "‚è™ –ù–∞–∑–∞–¥":
        context.user_data['current_question'] = current_question
        message = await send_question(update, context, current_question)
        context.user_data['last_message_id'] = message.message_id
        return FREQUENCY
    
    try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
    except: pass
    
    frequency_score = context.user_data['current_frequency_score']
    duration_multiplier = DURATION_MULTIPLIERS[user_answer]
    final_score = frequency_score * duration_multiplier
    
    context.user_data['answers'].append({
        'question': current_question, 'frequency': context.user_data['current_frequency'],
        'frequency_score': frequency_score, 'duration': user_answer,
        'final_score': final_score, 'zone': QUESTIONS[current_question]['zone']
    })
    
    return await next_question(update, context)

async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_question'] += 1
    current_question = context.user_data['current_question']
    
    if current_question < len(QUESTIONS):
        message = await send_question(update, context, current_question)
        context.user_data['last_message_id'] = message.message_id
        return FREQUENCY
    else:
        return await calculate_results(update, context)

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_question = context.user_data['current_question']
    if current_question > 0:
        if context.user_data['answers']: context.user_data['answers'].pop()
        context.user_data['current_question'] -= 1
        previous_question = context.user_data['current_question']
        message = await send_question(update, context, previous_question)
        context.user_data['last_message_id'] = message.message_id
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except: pass
        return FREQUENCY
    else:
        message = await send_question(update, context, current_question)
        context.user_data['last_message_id'] = message.message_id
        return FREQUENCY

async def reset_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['last_message_id'])
    except: pass
    try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
    except: pass
    return await start(update, context)

async def calculate_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = context.user_data['answers']
    zone_scores = {'burnout': 0, 'integration': 0, 'distress': 0}
    
    for answer in answers:
        zone = answer['zone']
        zone_scores[zone] += answer['final_score']
    
    total_score = sum(zone_scores.values())
    
    if total_score > 0:
        burnout_percent = round((zone_scores['burnout'] / total_score) * 100, 1)
        integration_percent = round((zone_scores['integration'] / total_score) * 100, 1)
        distress_percent = round((zone_scores['distress'] / total_score) * 100, 1)
    else:
        burnout_percent = integration_percent = distress_percent = 0
    
    save_test_result(
        user_id=context.user_data['user_id'],
        username=context.user_data['username'],
        burnout_percent=burnout_percent,
        integration_percent=integration_percent,
        distress_percent=distress_percent
    )
    
    admin_message = f"üìä –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{context.user_data['username']}\n–í—ã–≥–æ—Ä–∞–Ω–∏–µ: {burnout_percent}%\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_percent}%\n–î–∏—Å—Ç—Ä–µ—Å—Å: {distress_percent}%"
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    
    result_text = f"üéØ –í–ê–®–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n\nüü£ –ó–æ–Ω–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {burnout_percent}%\nüü¢ –ó–æ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_percent}%\nüî¥ –ó–æ–Ω–∞ –¥–∏—Å—Ç—Ä–µ—Å—Å–∞: {distress_percent}%\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ Instagram\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    
    try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['last_message_id'])
    except: pass
    
    await update.message.reply_text(result_text, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    init_db()
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FREQUENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_frequency)],
            DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_duration)],
        }, fallbacks=[])
    application.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
